import config
import telebot

import data
import profile
import random
from data import *
import bots
import json

from telebot import types

bot = telebot.TeleBot(config.TOKEN)

print("start")


def show_home(call, bot):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data='SHOW_PROFILE_CALLBACK')
    item2 = types.InlineKeyboardButton("ü§ñ –ú–æ–∏ –±–æ—Ç—ã", callback_data='SHOW_BOT_LIST_CALLBACK')
    item3 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data='ADD_BOT_CALLBACK')
    item4 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å API-key", callback_data='ADD_API_CALLBACK')
    markup.add(item1, item2).row(item3, item4)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EchoTrade, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–∞–º–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                          parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data='SHOW_PROFILE_CALLBACK')
    item2 = types.InlineKeyboardButton("ü§ñ –ú–æ–∏ –±–æ—Ç—ã", callback_data='SHOW_BOT_LIST_CALLBACK')
    item3 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data='ADD_BOT_CALLBACK')
    item4 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å API-key", callback_data='ADD_API_CALLBACK')
    markup.add(item1, item2).row(item3, item4)
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EchoTrade!\n"
                     "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–∞–º–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                     parse_mode='html', reply_markup=markup)
    print(read_table('chats'))

    in_table1 = message.chat.id in [i['chat_id'] for i in read_table('chats')]
    in_table2 = message.chat.id in [i['chat_id'] for i in read_table('tg_actions')]

    if not (in_table1 or in_table2):
        create_chats(chat_id=message.chat.id, username="{0.username}".format(
            message.from_user), balance=0)
        create_actions(chat_id=message.chat.id, action='none')


@bot.message_handler(content_types=['text'])
def chater(message):
    chatid = message.chat.id
    if message.chat.type == 'private':
        #ADD API
        if get_actions(chat_id=chatid) == "INSERT_BASE_API":
            data.update_keys(key_id=get_editable_keys(chatid)['key_id'], base_key=str(message.text))
            data.update_actions(message.chat.id, 'none')
            #bot.send_message(chat_id=chatid, text=f'‚úÖbase-key = {message.text}')
            bots.send_add_api(call=chatid,bot=bot)

        if get_actions(chat_id=chatid) == "INSERT_SECRET_API":
            data.update_keys(key_id=get_editable_keys(chatid)['key_id'], secret_key=str(message.text))
            data.update_actions(message.chat.id, 'none')
            #bot.send_message(chat_id=chatid, text=f'‚úÖsecret-key = {message.text}')
            bots.send_add_api(call=chatid, bot=bot)

        if get_actions(chat_id=chatid) == "INSERT_NAME_API":
            data.update_keys(key_id=get_editable_keys(chatid)['key_id'], key_name=str(message.text))
            data.update_actions(message.chat.id, 'none')
            #bot.send_message(chat_id=chatid, text=f'‚úÖname = {message.text}')
            bots.send_add_api(call=chatid, bot=bot)

        if get_actions(chat_id=chatid) == "INSERT_BOURSE_API":
            data.update_keys(key_id=get_editable_keys(chatid)['key_id'], bourse=str(message.text))
            data.update_actions(message.chat.id, 'none')
            #bot.send_message(chat_id=chatid, text=f'‚úÖbourse = {message.text}')
            bots.send_add_api(call=chatid, bot=bot)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    chatid = str(call.message.chat.id)
    try:
        if call.data == 'ADD_BOT_CALLBACK':
            bots.add_bot(call, bot)
        if call.data == 'SHOW_PROFILE_CALLBACK':
            profile.show_profile(call, bot)
        if call.data == 'ADD_API_CALLBACK':
            bots.add_api(call,bot)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        if call.data == 'BACK_HOME_CALLBACK':
            show_home(call, bot)
        #–ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if call.data == "CANSEL_ADD_API":
            pass

        #ADD BOTS
        

        #ADD API
        if call.data == 'INSERT_BASE_API':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ base-key")
            #bot.send_message(chat_id=chatid, text="–í–≤–µ–¥–∏—Ç–µ base-key")
            data.update_actions(chatid, "INSERT_BASE_API")

        if call.data == 'INSERT_SECRET_API':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ Secret-key")
            #bot.send_message(chat_id=chatid, text="–í–≤–µ–¥–∏—Ç–µ Secret-key")
            data.update_actions(chatid, "INSERT_SECRET_API")

        if call.data == 'INSERT_NAME_API':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            #bot.send_message(chat_id=chatid, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            data.update_actions(chatid, "INSERT_NAME_API")

        if call.data == 'INSERT_BOURSE_API':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É")
            #bot.send_message(chat_id=chatid, text="–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É")
            data.update_actions(chatid, "INSERT_BOURSE_API")

        if call.data == 'SAVE_API':
            values = data.get_editable_keys(chat_id=call.message.chat.id)
            for i in values:
                print(i)
                if values[i] is None:
                    bots.error_add_api(call,bot)
                    return
            show_home(call, bot)

        if call.data == 'CANSEL_ADD_API':
            data.delete_record('keys', data.get_editable_keys(chat_id=call.message.chat.id)['key_id'])
            show_home(call, bot)

    except Exception as ex:
        print(ex)


bot.infinity_polling()
